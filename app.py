import sqlite3
from flask import Flask
from routes import bp as routes_bp
from dotenv import load_dotenv
import os
from werkzeug.security import generate_password_hash  # ‚úÖ –ü–∞—Ä–æ–ª–Ω–∏ —Ö—ç—à–ª–∞—à —É—á—É–Ω –∏–º–ø–æ—Ä—Ç
from flask import session
from datetime import datetime
from flask import g


app = Flask(__name__)
load_dotenv()
app.secret_key = os.getenv("SECRET_KEY")  # ‚úÖ .env —Ñ–∞–π–ª–¥–∞–Ω –º–∞—Ö—Ñ–∏–π –∫–∞–ª–∏—Ç –æ–ª–∏–Ω–∞–¥–∏

# üîê Session —É—á—É–Ω “õ—û–ª–ª–∞–Ω–∏–ª–∞–¥–∏–≥–∞–Ω –∫–∞–ª–∏—Ç
# app.secret_key = "bu_juda_maxfiy_kalit_123"  # –ê–≥–∞—Ä .env –∏—à–ª–∞–º–∞—Å–∞, —É—à–±—É “õ–∞—Ç–æ—Ä–Ω–∏ –∏—à–ª–∞—Ç–∏–Ω–≥

app.register_blueprint(routes_bp)

# üìÇ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä –±–∞–∑–∞—Å–∏ –Ω–æ–º–∏
DATABASE = "sales.db"

def get_db_connection():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row  # JSON —Ñ–æ—Ä–º–∞—Ç–¥–∞ “õ–∞–π—Ç–∞—Ä–∏—à —É—á—É–Ω
    return conn

def init_db():
    """üõ† Bazani yaratish funksiyasi"""
    with get_db_connection() as conn:
        cursor = conn.cursor()

        # üßæ Savdolar –∂–∞–¥–≤–∞–ª–∏
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS sales (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sana TEXT,
                inkassa REAL,
                terminal_term REAL,
                terminal_humo REAL,
                nakd REAL,
                jami_tushum REAL
            )
        """)

        # üí∏ –•–∞—Ä–∞–∂–∞—Ç–ª–∞—Ä –∂–∞–¥–≤–∞–ª–∏
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS expenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sana TEXT,
                xarajat_nomi TEXT,
                miqdor REAL,
                izoh TEXT
            )
        """)

        # üë• –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä –∂–∞–¥–≤–∞–ª–∏
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                role TEXT DEFAULT 'user'
            )
        """)

        # ‚úÖ –ê–≥–∞—Ä 'admin' –π—û“õ –±—û–ª—Å–∞ ‚Äî “õ—û—à–∞–º–∏–∑:
        cursor.execute("SELECT COUNT(*) FROM users WHERE username = 'admin'")
        if cursor.fetchone()[0] == 0:
            hashed_admin_pass = generate_password_hash("admin123")  # üîí –ü–∞—Ä–æ–ª —Ö—ç—à–ª–∞–Ω–∞–¥–∏
            cursor.execute("INSERT INTO users (username, password, role) VALUES (?, ?, ?)",
                           ("admin", hashed_admin_pass, "admin"))

        conn.commit()
    conn.close()

@app.before_request
def update_user_activity():
    if "user_id" in session and "username" in session:
        conn = get_db_connection()
        conn.execute("""
            INSERT OR REPLACE INTO users_online (user_id, username, last_active)
            VALUES (?, ?, ?)
        """, (session["user_id"], session["username"], datetime.now()))
        conn.commit()
        conn.close()


@app.before_request
def update_user_online():
    if "user_id" in session:
        conn = get_db_connection()
        conn.execute("""
            INSERT OR REPLACE INTO users_online (user_id, username, last_active)
            VALUES (?, ?, ?)
        """, (session["user_id"], session["username"], datetime.now()))
        conn.commit()
        conn.close()


# ‚úÖ –î–∞—Å—Ç–ª–∞–±–∫–∏ –±–∞–∑–∞–Ω–∏ —Ç–∞–π—ë—Ä–ª–∞–π–º–∏–∑
init_db()

# üöÄ –°–µ—Ä–≤–µ—Ä–Ω–∏ –∏—à–≥–∞ —Ç—É—à—É—Ä–∞–º–∏–∑
if __name__ == "__main__":
    app.run(debug=True)
